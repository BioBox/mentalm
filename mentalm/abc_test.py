from abc import ABC, abstractmethod

class Test(ABC):
    """Abstract class for tests. The time_limit variable is currently unused."""
    def __init__(self, numq, time_limit, valueq=1):
        self.numq = numq
        self.valueq = valueq
        self.time_limit = time_limit

        self.quit = False
        self.questions = []
        self.answers = []
        self.u_answers = [] # user answers
    
    def start(self):
        for i in range(self.numq):
            self.questions.append(self.next_question())
            self.answers.append(self.get_answer(self.questions[i]))

            self.display_question(i)
            self.u_answers.append(self.get_input())

            if self.quit:
                self.abort_test()
                return

        self.end_test()

    def abort_test(self):
        # self.quit should be true when this function is called.
        self.questions.pop()
        self.answers.pop()
        self.u_answers.pop()
        
        self.end_test()

    @abstractmethod
    def next_question(self):
        # Generates the next question.
        pass

    @abstractmethod
    def display_question(self, i):
        # Displays the question generated by next_question()
        pass

    @abstractmethod
    def get_input(self):
        # This function returns the user's input.
        pass

    @abstractmethod
    def get_answer(self, question):
        # Generates the answer to a question
        pass

    @abstractmethod
    def end_test(self):
        # This function should print test results and/or save them somewhere.
        pass
